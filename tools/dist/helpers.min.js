const templater=e=>s=>(Array.isArray(s)?s:[s]).reduce((s,r,o,a)=>s+e(r,o,a),""),someProps=(e,s)=>r=>e.some(e=>RegExp(s,"i").test(r[e])),somePropsAll=(e,s,r)=>e.filter(someProps(s,r)),somePropsFirst=(e,s,r)=>e.find(someProps(s,r)),somePropsIndex=(e,s,r)=>e.findIndex(someProps(s,r)),sameProps=e=>s=>Object.keys(e).every(r=>s[r]===e[r]),samePropsAll=(e,s)=>e.filter(sameProps(s)),samePropsFirst=(e,s)=>e.find(sameProps(s)),samePropsIndex=(e,s)=>e.findIndex(sameProps(s)),zeros=(e,s)=>(+e+Math.pow(10,s)+"").substr(1),numberCommas=e=>(e+"").replace(/\B(?=(?=\d*\.)(\d{3})+(?!\d))/g,","),moneyCommas=(e,s=2)=>"$"+numberCommas(e.toFixed(s)),arrayReplace=(e,s)=>r=>e.reduce((e,r,o)=>e.replace(r,s[o]),r),readFiles=(e,s,r=0)=>{if(e&&e[r]){let o=new FileReader;o.onload=(o=>{s(o),readFiles(e,s,r+1)}),o.readAsDataURL(e[r])}},compose=(...e)=>s=>e.reduceRight((e,s)=>s(e),s),pipe=(...e)=>s=>e.reduce((e,s)=>s(e),s),trace=e=>s=>(console.log(`${e}: ${s}`),s),delay=e=>new Promise(s=>setTimeout(s,e)),aGetFile=async e=>{const s=await fetch(e);return await s.json()},checkData=(e,s=10)=>new Promise(r=>{const o=()=>e()?r(e()):setTimeout(o,s);o()}),mapJoin=(e,s,r)=>e.map(s).join(r),splitMapJoin=(e,s,r,o=/\s?,\s?/)=>mapJoin(Array.isArray(e)?e:e.split(o),s,r),getStore=e=>void 0!==localStorage[e]?JSON.parse(localStorage[e]):[],setStore=(e,s)=>localStorage[e]=JSON.stringify(s),order=(e,s="order",r=!1)=>e.slice().sort((e,o)=>e[s]>o[s]?r?-1:1:e[s]<o[s]?r?1:-1:0);